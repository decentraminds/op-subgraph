// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class TemplateProposed extends EthereumEvent {
  get params(): TemplateProposed__Params {
    return new TemplateProposed__Params(this);
  }
}

export class TemplateProposed__Params {
  _event: TemplateProposed;

  constructor(event: TemplateProposed) {
    this._event = event;
  }

  get Id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get name(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get conditionTypes(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get actorTypeIds(): Array<Bytes> {
    return this._event.parameters[3].value.toBytesArray();
  }
}

export class TemplateApproved extends EthereumEvent {
  get params(): TemplateApproved__Params {
    return new TemplateApproved__Params(this);
  }
}

export class TemplateApproved__Params {
  _event: TemplateApproved;

  constructor(event: TemplateApproved) {
    this._event = event;
  }

  get Id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get state(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class TemplateRevoked extends EthereumEvent {
  get params(): TemplateRevoked__Params {
    return new TemplateRevoked__Params(this);
  }
}

export class TemplateRevoked__Params {
  _event: TemplateRevoked;

  constructor(event: TemplateRevoked) {
    this._event = event;
  }

  get Id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get state(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TemplateStoreManager__getTemplateResult {
  value0: i32;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: Array<Address>;
  value5: Array<Bytes>;

  constructor(
    value0: i32,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: Array<Address>,
    value5: Array<Bytes>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set(
      "value0",
      EthereumValue.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromAddressArray(this.value4));
    map.set("value5", EthereumValue.fromFixedBytesArray(this.value5));
    return map;
  }
}

export class TemplateStoreManager extends SmartContract {
  static bind(address: Address): TemplateStoreManager {
    return new TemplateStoreManager("TemplateStoreManager", address);
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", []);

    return result[0].toBoolean();
  }

  try_isOwner(): CallResult<boolean> {
    let result = super.tryCall("isOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  generateId(templateName: string): Bytes {
    let result = super.call("generateId", [
      EthereumValue.fromString(templateName)
    ]);

    return result[0].toBytes();
  }

  try_generateId(templateName: string): CallResult<Bytes> {
    let result = super.tryCall("generateId", [
      EthereumValue.fromString(templateName)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  proposeTemplate(
    _id: Address,
    _conditionTypes: Array<Address>,
    _actorTypeIds: Array<Bytes>,
    name: string
  ): BigInt {
    let result = super.call("proposeTemplate", [
      EthereumValue.fromAddress(_id),
      EthereumValue.fromAddressArray(_conditionTypes),
      EthereumValue.fromFixedBytesArray(_actorTypeIds),
      EthereumValue.fromString(name)
    ]);

    return result[0].toBigInt();
  }

  try_proposeTemplate(
    _id: Address,
    _conditionTypes: Array<Address>,
    _actorTypeIds: Array<Bytes>,
    name: string
  ): CallResult<BigInt> {
    let result = super.tryCall("proposeTemplate", [
      EthereumValue.fromAddress(_id),
      EthereumValue.fromAddressArray(_conditionTypes),
      EthereumValue.fromFixedBytesArray(_actorTypeIds),
      EthereumValue.fromString(name)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  proposeTemplate1(
    _id: Bytes,
    _conditionTypes: Array<Address>,
    _actorTypeIds: Array<Bytes>,
    name: string
  ): BigInt {
    let result = super.call("proposeTemplate", [
      EthereumValue.fromFixedBytes(_id),
      EthereumValue.fromAddressArray(_conditionTypes),
      EthereumValue.fromFixedBytesArray(_actorTypeIds),
      EthereumValue.fromString(name)
    ]);

    return result[0].toBigInt();
  }

  try_proposeTemplate1(
    _id: Bytes,
    _conditionTypes: Array<Address>,
    _actorTypeIds: Array<Bytes>,
    name: string
  ): CallResult<BigInt> {
    let result = super.tryCall("proposeTemplate", [
      EthereumValue.fromFixedBytes(_id),
      EthereumValue.fromAddressArray(_conditionTypes),
      EthereumValue.fromFixedBytesArray(_actorTypeIds),
      EthereumValue.fromString(name)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  registerTemplateActorType(_actorType: string): Bytes {
    let result = super.call("registerTemplateActorType", [
      EthereumValue.fromString(_actorType)
    ]);

    return result[0].toBytes();
  }

  try_registerTemplateActorType(_actorType: string): CallResult<Bytes> {
    let result = super.tryCall("registerTemplateActorType", [
      EthereumValue.fromString(_actorType)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getTemplate(_id: Bytes): TemplateStoreManager__getTemplateResult {
    let result = super.call("getTemplate", [EthereumValue.fromFixedBytes(_id)]);

    return new TemplateStoreManager__getTemplateResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toAddressArray(),
      result[5].toBytesArray()
    );
  }

  try_getTemplate(
    _id: Bytes
  ): CallResult<TemplateStoreManager__getTemplateResult> {
    let result = super.tryCall("getTemplate", [
      EthereumValue.fromFixedBytes(_id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new TemplateStoreManager__getTemplateResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toAddressArray(),
        value[5].toBytesArray()
      )
    );
  }

  getTemplateActorTypeIds(): Array<Bytes> {
    let result = super.call("getTemplateActorTypeIds", []);

    return result[0].toBytesArray();
  }

  try_getTemplateActorTypeIds(): CallResult<Array<Bytes>> {
    let result = super.tryCall("getTemplateActorTypeIds", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytesArray());
  }

  getTemplateActorTypeId(actorType: string): Bytes {
    let result = super.call("getTemplateActorTypeId", [
      EthereumValue.fromString(actorType)
    ]);

    return result[0].toBytes();
  }

  try_getTemplateActorTypeId(actorType: string): CallResult<Bytes> {
    let result = super.tryCall("getTemplateActorTypeId", [
      EthereumValue.fromString(actorType)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getTemplateActorTypeValue(_Id: Bytes): string {
    let result = super.call("getTemplateActorTypeValue", [
      EthereumValue.fromFixedBytes(_Id)
    ]);

    return result[0].toString();
  }

  try_getTemplateActorTypeValue(_Id: Bytes): CallResult<string> {
    let result = super.tryCall("getTemplateActorTypeValue", [
      EthereumValue.fromFixedBytes(_Id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  getTemplateActorTypeState(_Id: Bytes): BigInt {
    let result = super.call("getTemplateActorTypeState", [
      EthereumValue.fromFixedBytes(_Id)
    ]);

    return result[0].toBigInt();
  }

  try_getTemplateActorTypeState(_Id: Bytes): CallResult<BigInt> {
    let result = super.tryCall("getTemplateActorTypeState", [
      EthereumValue.fromFixedBytes(_Id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getTemplateListSize(): BigInt {
    let result = super.call("getTemplateListSize", []);

    return result[0].toBigInt();
  }

  try_getTemplateListSize(): CallResult<BigInt> {
    let result = super.tryCall("getTemplateListSize", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isTemplateApproved(_id: Bytes): boolean {
    let result = super.call("isTemplateApproved", [
      EthereumValue.fromFixedBytes(_id)
    ]);

    return result[0].toBoolean();
  }

  try_isTemplateApproved(_id: Bytes): CallResult<boolean> {
    let result = super.tryCall("isTemplateApproved", [
      EthereumValue.fromFixedBytes(_id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isTemplateApproved1(_id: Address): boolean {
    let result = super.call("isTemplateApproved", [
      EthereumValue.fromAddress(_id)
    ]);

    return result[0].toBoolean();
  }

  try_isTemplateApproved1(_id: Address): CallResult<boolean> {
    let result = super.tryCall("isTemplateApproved", [
      EthereumValue.fromAddress(_id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class RenounceOwnershipCall extends EthereumCall {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ProposeTemplateCall extends EthereumCall {
  get inputs(): ProposeTemplateCall__Inputs {
    return new ProposeTemplateCall__Inputs(this);
  }

  get outputs(): ProposeTemplateCall__Outputs {
    return new ProposeTemplateCall__Outputs(this);
  }
}

export class ProposeTemplateCall__Inputs {
  _call: ProposeTemplateCall;

  constructor(call: ProposeTemplateCall) {
    this._call = call;
  }

  get _id(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _conditionTypes(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _actorTypeIds(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get name(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ProposeTemplateCall__Outputs {
  _call: ProposeTemplateCall;

  constructor(call: ProposeTemplateCall) {
    this._call = call;
  }

  get size(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ProposeTemplate1Call extends EthereumCall {
  get inputs(): ProposeTemplate1Call__Inputs {
    return new ProposeTemplate1Call__Inputs(this);
  }

  get outputs(): ProposeTemplate1Call__Outputs {
    return new ProposeTemplate1Call__Outputs(this);
  }
}

export class ProposeTemplate1Call__Inputs {
  _call: ProposeTemplate1Call;

  constructor(call: ProposeTemplate1Call) {
    this._call = call;
  }

  get _id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _conditionTypes(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _actorTypeIds(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get name(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ProposeTemplate1Call__Outputs {
  _call: ProposeTemplate1Call;

  constructor(call: ProposeTemplate1Call) {
    this._call = call;
  }

  get size(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ApproveTemplateCall extends EthereumCall {
  get inputs(): ApproveTemplateCall__Inputs {
    return new ApproveTemplateCall__Inputs(this);
  }

  get outputs(): ApproveTemplateCall__Outputs {
    return new ApproveTemplateCall__Outputs(this);
  }
}

export class ApproveTemplateCall__Inputs {
  _call: ApproveTemplateCall;

  constructor(call: ApproveTemplateCall) {
    this._call = call;
  }

  get _id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ApproveTemplateCall__Outputs {
  _call: ApproveTemplateCall;

  constructor(call: ApproveTemplateCall) {
    this._call = call;
  }
}

export class RevokeTemplateCall extends EthereumCall {
  get inputs(): RevokeTemplateCall__Inputs {
    return new RevokeTemplateCall__Inputs(this);
  }

  get outputs(): RevokeTemplateCall__Outputs {
    return new RevokeTemplateCall__Outputs(this);
  }
}

export class RevokeTemplateCall__Inputs {
  _call: RevokeTemplateCall;

  constructor(call: RevokeTemplateCall) {
    this._call = call;
  }

  get _id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RevokeTemplateCall__Outputs {
  _call: RevokeTemplateCall;

  constructor(call: RevokeTemplateCall) {
    this._call = call;
  }
}

export class RegisterTemplateActorTypeCall extends EthereumCall {
  get inputs(): RegisterTemplateActorTypeCall__Inputs {
    return new RegisterTemplateActorTypeCall__Inputs(this);
  }

  get outputs(): RegisterTemplateActorTypeCall__Outputs {
    return new RegisterTemplateActorTypeCall__Outputs(this);
  }
}

export class RegisterTemplateActorTypeCall__Inputs {
  _call: RegisterTemplateActorTypeCall;

  constructor(call: RegisterTemplateActorTypeCall) {
    this._call = call;
  }

  get _actorType(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RegisterTemplateActorTypeCall__Outputs {
  _call: RegisterTemplateActorTypeCall;

  constructor(call: RegisterTemplateActorTypeCall) {
    this._call = call;
  }

  get actorTypeId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class DeregisterTemplateActorTypeCall extends EthereumCall {
  get inputs(): DeregisterTemplateActorTypeCall__Inputs {
    return new DeregisterTemplateActorTypeCall__Inputs(this);
  }

  get outputs(): DeregisterTemplateActorTypeCall__Outputs {
    return new DeregisterTemplateActorTypeCall__Outputs(this);
  }
}

export class DeregisterTemplateActorTypeCall__Inputs {
  _call: DeregisterTemplateActorTypeCall;

  constructor(call: DeregisterTemplateActorTypeCall) {
    this._call = call;
  }

  get _Id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DeregisterTemplateActorTypeCall__Outputs {
  _call: DeregisterTemplateActorTypeCall;

  constructor(call: DeregisterTemplateActorTypeCall) {
    this._call = call;
  }
}
