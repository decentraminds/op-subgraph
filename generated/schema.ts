// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DIDRegistry extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DIDRegistry entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DIDRegistry entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DIDRegistry", id.toString(), this);
  }

  static load(id: string): DIDRegistry | null {
    return store.get("DIDRegistry", id) as DIDRegistry | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get checksum(): Bytes {
    let value = this.get("checksum");
    return value.toBytes();
  }

  set checksum(value: Bytes) {
    this.set("checksum", Value.fromBytes(value));
  }

  get value(): string {
    let value = this.get("value");
    return value.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }

  get lastUpdatedBy(): Bytes {
    let value = this.get("lastUpdatedBy");
    return value.toBytes();
  }

  set lastUpdatedBy(value: Bytes) {
    this.set("lastUpdatedBy", Value.fromBytes(value));
  }

  get providers(): Array<Bytes> | null {
    let value = this.get("providers");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set providers(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("providers");
    } else {
      this.set("providers", Value.fromBytesArray(value as Array<Bytes>));
    }
  }

  get permissions(): Array<string> | null {
    let value = this.get("permissions");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set permissions(value: Array<string> | null) {
    if (value === null) {
      this.unset("permissions");
    } else {
      this.set("permissions", Value.fromStringArray(value as Array<string>));
    }
  }

  get lastBlockUpdated(): BigInt {
    let value = this.get("lastBlockUpdated");
    return value.toBigInt();
  }

  set lastBlockUpdated(value: BigInt) {
    this.set("lastBlockUpdated", Value.fromBigInt(value));
  }
}

export class DIDGrantee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DIDGrantee entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DIDGrantee entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DIDGrantee", id.toString(), this);
  }

  static load(id: string): DIDGrantee | null {
    return store.get("DIDGrantee", id) as DIDGrantee | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get did(): Bytes {
    let value = this.get("did");
    return value.toBytes();
  }

  set did(value: Bytes) {
    this.set("did", Value.fromBytes(value));
  }

  get grantee(): Bytes {
    let value = this.get("grantee");
    return value.toBytes();
  }

  set grantee(value: Bytes) {
    this.set("grantee", Value.fromBytes(value));
  }

  get allowed(): boolean {
    let value = this.get("allowed");
    return value.toBoolean();
  }

  set allowed(value: boolean) {
    this.set("allowed", Value.fromBoolean(value));
  }

  get lastBlockUpdated(): BigInt {
    let value = this.get("lastBlockUpdated");
    return value.toBigInt();
  }

  set lastBlockUpdated(value: BigInt) {
    this.set("lastBlockUpdated", Value.fromBigInt(value));
  }
}

export class SEATemplate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SEATemplate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SEATemplate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SEATemplate", id.toString(), this);
  }

  static load(id: string): SEATemplate | null {
    return store.get("SEATemplate", id) as SEATemplate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get lastUpdatedBy(): Bytes {
    let value = this.get("lastUpdatedBy");
    return value.toBytes();
  }

  set lastUpdatedBy(value: Bytes) {
    this.set("lastUpdatedBy", Value.fromBytes(value));
  }

  get blockNumberUpdated(): BigInt {
    let value = this.get("blockNumberUpdated");
    return value.toBigInt();
  }

  set blockNumberUpdated(value: BigInt) {
    this.set("blockNumberUpdated", Value.fromBigInt(value));
  }
}

export class SEACondition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SEACondition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SEACondition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SEACondition", id.toString(), this);
  }

  static load(id: string): SEACondition | null {
    return store.get("SEACondition", id) as SEACondition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get timeLock(): BigInt {
    let value = this.get("timeLock");
    return value.toBigInt();
  }

  set timeLock(value: BigInt) {
    this.set("timeLock", Value.fromBigInt(value));
  }

  get timeOut(): BigInt {
    let value = this.get("timeOut");
    return value.toBigInt();
  }

  set timeOut(value: BigInt) {
    this.set("timeOut", Value.fromBigInt(value));
  }

  get lastUpdatedBy(): Bytes {
    let value = this.get("lastUpdatedBy");
    return value.toBytes();
  }

  set lastUpdatedBy(value: Bytes) {
    this.set("lastUpdatedBy", Value.fromBytes(value));
  }

  get blockNumberUpdated(): BigInt {
    let value = this.get("blockNumberUpdated");
    return value.toBigInt();
  }

  set blockNumberUpdated(value: BigInt) {
    this.set("blockNumberUpdated", Value.fromBigInt(value));
  }
}

export class ServiceAgreement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ServiceAgreement entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ServiceAgreement entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ServiceAgreement", id.toString(), this);
  }

  static load(id: string): ServiceAgreement | null {
    return store.get("ServiceAgreement", id) as ServiceAgreement | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get template(): string {
    let value = this.get("template");
    return value.toString();
  }

  set template(value: string) {
    this.set("template", Value.fromString(value));
  }

  get did(): Bytes {
    let value = this.get("did");
    return value.toBytes();
  }

  set did(value: Bytes) {
    this.set("did", Value.fromBytes(value));
  }

  get accessConsumer(): Bytes {
    let value = this.get("accessConsumer");
    return value.toBytes();
  }

  set accessConsumer(value: Bytes) {
    this.set("accessConsumer", Value.fromBytes(value));
  }

  get accessProvider(): Bytes {
    let value = this.get("accessProvider");
    return value.toBytes();
  }

  set accessProvider(value: Bytes) {
    this.set("accessProvider", Value.fromBytes(value));
  }

  get timeLocks(): Array<BigInt> | null {
    let value = this.get("timeLocks");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set timeLocks(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("timeLocks");
    } else {
      this.set("timeLocks", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get timeOuts(): Array<BigInt> | null {
    let value = this.get("timeOuts");
    if (value === null) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set timeOuts(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("timeOuts");
    } else {
      this.set("timeOuts", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get conditions(): Array<string> | null {
    let value = this.get("conditions");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set conditions(value: Array<string> | null) {
    if (value === null) {
      this.unset("conditions");
    } else {
      this.set("conditions", Value.fromStringArray(value as Array<string>));
    }
  }

  get lastBlockUpdated(): BigInt {
    let value = this.get("lastBlockUpdated");
    return value.toBigInt();
  }

  set lastBlockUpdated(value: BigInt) {
    this.set("lastBlockUpdated", Value.fromBigInt(value));
  }
}

export class AccessSecretStoreCondition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save AccessSecretStoreCondition entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AccessSecretStoreCondition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AccessSecretStoreCondition", id.toString(), this);
  }

  static load(id: string): AccessSecretStoreCondition | null {
    return store.get(
      "AccessSecretStoreCondition",
      id
    ) as AccessSecretStoreCondition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get agreement(): string {
    let value = this.get("agreement");
    return value.toString();
  }

  set agreement(value: string) {
    this.set("agreement", Value.fromString(value));
  }

  get documentId(): Bytes {
    let value = this.get("documentId");
    return value.toBytes();
  }

  set documentId(value: Bytes) {
    this.set("documentId", Value.fromBytes(value));
  }

  get grantee(): Bytes {
    let value = this.get("grantee");
    return value.toBytes();
  }

  set grantee(value: Bytes) {
    this.set("grantee", Value.fromBytes(value));
  }

  get conditionId(): string {
    let value = this.get("conditionId");
    return value.toString();
  }

  set conditionId(value: string) {
    this.set("conditionId", Value.fromString(value));
  }

  get lastBlockUpdated(): BigInt {
    let value = this.get("lastBlockUpdated");
    return value.toBigInt();
  }

  set lastBlockUpdated(value: BigInt) {
    this.set("lastBlockUpdated", Value.fromBigInt(value));
  }
}

export class LockRewardCondition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LockRewardCondition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LockRewardCondition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LockRewardCondition", id.toString(), this);
  }

  static load(id: string): LockRewardCondition | null {
    return store.get("LockRewardCondition", id) as LockRewardCondition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get agreement(): string {
    let value = this.get("agreement");
    return value.toString();
  }

  set agreement(value: string) {
    this.set("agreement", Value.fromString(value));
  }

  get rewardAddress(): Bytes {
    let value = this.get("rewardAddress");
    return value.toBytes();
  }

  set rewardAddress(value: Bytes) {
    this.set("rewardAddress", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get conditionId(): string {
    let value = this.get("conditionId");
    return value.toString();
  }

  set conditionId(value: string) {
    this.set("conditionId", Value.fromString(value));
  }

  get lastBlockUpdated(): BigInt {
    let value = this.get("lastBlockUpdated");
    return value.toBigInt();
  }

  set lastBlockUpdated(value: BigInt) {
    this.set("lastBlockUpdated", Value.fromBigInt(value));
  }
}

export class EscrowRewardCondition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save EscrowRewardCondition entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EscrowRewardCondition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EscrowRewardCondition", id.toString(), this);
  }

  static load(id: string): EscrowRewardCondition | null {
    return store.get(
      "EscrowRewardCondition",
      id
    ) as EscrowRewardCondition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get agreement(): string {
    let value = this.get("agreement");
    return value.toString();
  }

  set agreement(value: string) {
    this.set("agreement", Value.fromString(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get conditionId(): string {
    let value = this.get("conditionId");
    return value.toString();
  }

  set conditionId(value: string) {
    this.set("conditionId", Value.fromString(value));
  }

  get lastBlockUpdated(): BigInt {
    let value = this.get("lastBlockUpdated");
    return value.toBigInt();
  }

  set lastBlockUpdated(value: BigInt) {
    this.set("lastBlockUpdated", Value.fromBigInt(value));
  }
}
