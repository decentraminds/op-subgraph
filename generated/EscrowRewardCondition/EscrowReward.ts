// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Fulfilled extends EthereumEvent {
  get params(): Fulfilled__Params {
    return new Fulfilled__Params(this);
  }
}

export class Fulfilled__Params {
  _event: Fulfilled;

  constructor(event: Fulfilled) {
    this._event = event;
  }

  get _agreementId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _conditionId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EscrowReward extends SmartContract {
  static bind(address: Address): EscrowReward {
    return new EscrowReward("EscrowReward", address);
  }

  abortByTimeOut(_id: Bytes): i32 {
    let result = super.call("abortByTimeOut", [
      EthereumValue.fromFixedBytes(_id)
    ]);

    return result[0].toI32();
  }

  try_abortByTimeOut(_id: Bytes): CallResult<i32> {
    let result = super.tryCall("abortByTimeOut", [
      EthereumValue.fromFixedBytes(_id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", []);

    return result[0].toBoolean();
  }

  try_isOwner(): CallResult<boolean> {
    let result = super.tryCall("isOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  generateId(_agreementId: Bytes, _valueHash: Bytes): Bytes {
    let result = super.call("generateId", [
      EthereumValue.fromFixedBytes(_agreementId),
      EthereumValue.fromFixedBytes(_valueHash)
    ]);

    return result[0].toBytes();
  }

  try_generateId(_agreementId: Bytes, _valueHash: Bytes): CallResult<Bytes> {
    let result = super.tryCall("generateId", [
      EthereumValue.fromFixedBytes(_agreementId),
      EthereumValue.fromFixedBytes(_valueHash)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  hashValues(
    _amount: BigInt,
    _receiver: Address,
    _sender: Address,
    _lockCondition: Bytes,
    _releaseCondition: Bytes
  ): Bytes {
    let result = super.call("hashValues", [
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromAddress(_receiver),
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromFixedBytes(_lockCondition),
      EthereumValue.fromFixedBytes(_releaseCondition)
    ]);

    return result[0].toBytes();
  }

  try_hashValues(
    _amount: BigInt,
    _receiver: Address,
    _sender: Address,
    _lockCondition: Bytes,
    _releaseCondition: Bytes
  ): CallResult<Bytes> {
    let result = super.tryCall("hashValues", [
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromAddress(_receiver),
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromFixedBytes(_lockCondition),
      EthereumValue.fromFixedBytes(_releaseCondition)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  fulfill(
    _agreementId: Bytes,
    _amount: BigInt,
    _receiver: Address,
    _sender: Address,
    _lockCondition: Bytes,
    _releaseCondition: Bytes
  ): i32 {
    let result = super.call("fulfill", [
      EthereumValue.fromFixedBytes(_agreementId),
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromAddress(_receiver),
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromFixedBytes(_lockCondition),
      EthereumValue.fromFixedBytes(_releaseCondition)
    ]);

    return result[0].toI32();
  }

  try_fulfill(
    _agreementId: Bytes,
    _amount: BigInt,
    _receiver: Address,
    _sender: Address,
    _lockCondition: Bytes,
    _releaseCondition: Bytes
  ): CallResult<i32> {
    let result = super.tryCall("fulfill", [
      EthereumValue.fromFixedBytes(_agreementId),
      EthereumValue.fromUnsignedBigInt(_amount),
      EthereumValue.fromAddress(_receiver),
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromFixedBytes(_lockCondition),
      EthereumValue.fromFixedBytes(_releaseCondition)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }
}

export class AbortByTimeOutCall extends EthereumCall {
  get inputs(): AbortByTimeOutCall__Inputs {
    return new AbortByTimeOutCall__Inputs(this);
  }

  get outputs(): AbortByTimeOutCall__Outputs {
    return new AbortByTimeOutCall__Outputs(this);
  }
}

export class AbortByTimeOutCall__Inputs {
  _call: AbortByTimeOutCall;

  constructor(call: AbortByTimeOutCall) {
    this._call = call;
  }

  get _id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class AbortByTimeOutCall__Outputs {
  _call: AbortByTimeOutCall;

  constructor(call: AbortByTimeOutCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}

export class RenounceOwnershipCall extends EthereumCall {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _conditionStoreManagerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends EthereumCall {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class FulfillCall extends EthereumCall {
  get inputs(): FulfillCall__Inputs {
    return new FulfillCall__Inputs(this);
  }

  get outputs(): FulfillCall__Outputs {
    return new FulfillCall__Outputs(this);
  }
}

export class FulfillCall__Inputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }

  get _agreementId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _sender(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _lockCondition(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _releaseCondition(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class FulfillCall__Outputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }

  get value0(): i32 {
    return this._call.outputValues[0].value.toI32();
  }
}
